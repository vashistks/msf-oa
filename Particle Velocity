private static int help(int[]arr){
    if(arr.length<3)return 0;
    int count = 2;
    int diff = arr[1]-arr[0];
    int ans = 0;
    for(int i =2;i<arr.length;i++){
        if(arr[i]-arr[i-1]==diff){
            count++;
        }
        else{
            if(count >= 3)
                ans+=(count-2)*(count-1)/2;
            diff = arr[i] - arr[i-1];
            count = 2;
        }
    }
    if(count >= 3)
        ans+=(count-2)*(count-1)/2;
    if(ans>1_000_000_000 )return -1;
    return ans;
}

Two Pointer Method: O(N) Time complexity

public int numberOfArithmeticSlices(int[] A) {
    if(A.length<=2) return 0;
    int left=0;
    int right=0;
    int solution=0;
    while(left<A.length){
        right=left+2;
        int count=0;
        while(right<A.length && A[right-2]+A[right]==2*A[right-1]){//3,4,5
            count++;
            solution +=count;//+1,+2,+3
            right++;
        }
        left=right-1;
    }
    return solution<1_000_000_000?solution:-1;
}
